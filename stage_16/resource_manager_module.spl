// code : resource manager module
// CONSTANTS : 

// function number present in R1 and PID passed as an argument in R2. 
alias functionNum R1;
alias currentPID R2;

//acquire terminal function
if(functionNum == ACQUIRE_TERMINAL) then 
	while([TERMINAL_STATUS_TABLE] == 1) do
		alias currentPID R3; 
		currentPID = [SYSTEM_STATUS_TABLE+1];
		alias process_table_entry R4; 
		process_table_entry = PROCESS_TABLE + currentPID * 16; 
		[process_table_entry + 4] = WAIT_TERMINAL;
		multipush(R1, R2, R3, R4);


		call SCHEDULER;

		//this code will be executed only after the scheduler schedules the process again, 
		//whilch in turn occur only after the terminal was released by the holding process by invoking the release terminal function. 
		multipop(R1, R2, R3, R4);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE+1] = [SYSTEM_STATUS_TABLE+1];
	return;
endif;

//Release terminal function
//$$$$$$$$$$$$$$$$$$  INFO : see, the release terminal only make pid of the terminal status table as zero and set all the process having state wait_terminal as ready. Nothing else. $$$$$$$$$$$$$$$$ 

if(functionNum == RELEASE_TERMINAL) then 
	print "StartReleaseTer";
	if([SYSTEM_STATUS_TABLE+1] != [TERMINAL_STATUS_TABLE+1]) then
		R0 = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	alias counter R0;
	counter = 1;
	while(counter < 16) do
		alias process_table_entry R3; 
 		process_table_entry = PROCESS_TABLE + currentPID * 16; 
 		if([process_table_entry + 4] == WAIT_TERMINAL) then
			[process_table_entry + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;
	R0 = 0;
	print "endReleaseTer";
	return;
endif;
