// code : resource manager module
// CONSTANTS : 
// ACQUIRE_TERMINAL = 8
// RELEASE_TERMINAL = 9
// DISK_STATUS_TABLE = 29552

// function number present in R1 and PID passed as an argument in R2. 
//function number and current PID
alias functionNum R1;
alias currentPID R2;

if(functionNum == ACQUIRE_DISK) then

  // checking whether disk is free
  alias PID R2;
  while([DISK_STATUS_TABLE] == 1) do
    [PROCESS_TABLE + PID * 16 + 4] = WAIT_DISK;
    multipush(R1, R2);
    call SCHEDULER;
    multipop(R1, R2);
  endwhile;

  // a process will acquire disk by setting status to busy and setting pid entry to its pid. 
  [DISK_STATUS_TABLE] = 1;
  [DISK_STATUS_TABLE + 4] = PID;

  return;
endif;

if(functionNum == ACQUIRE_TERMINAL) then 
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 4] = WAIT_TERMINAL;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE+1] = R2;
	return;
endif;

if(functionNum == RELEASE_TERMINAL) then 
	if(currentPID != [TERMINAL_STATUS_TABLE+1]) then
		R0 = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	alias counter R0;
	counter = 1;
	while(counter < 16) do
 		if([PROCESS_TABLE + counter * 16 + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + counter * 16 + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;
	R0 = 0;
	return;
endif;
