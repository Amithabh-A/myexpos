//code : system call interrupt handler of fork system call

// ------------------------------------------------------------------------------------------------------------------------------------------

// Save user stack value for later use, set up the kernel stack, set MODE flag to syscall no of fork
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;
alias userSP R1;
userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11]*512 - 1;

// -------------  NECESSARY REGISTERS ---------------

alias parentPID R5;
parentPID = [SYSTEM_STATUS_TABLE + 1];

alias childPID R6;

alias parent_page_table R7;
parent_page_table = PTBR;

alias child_page_table R8;

alias parent_process_table R9;
parent_process_table = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

alias child_process_table R10;

// --------------------------------------------------

// allocate memory and set process table.
// process table entry for child process
multipush(R1);
R1 = GET_PCB_ENTRY;
call PROCESS_MANAGER;
multipop(R1);

childPID = R0;

if (childPID == -1) then
     	[[PTBR + 2 * (userSP - 1)/ 512] * 512 + (userSP - 1) % 512] = -1;
      SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13];
      [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
      ireturn;
endif;

child_page_table = PAGE_TABLE_BASE + childPID * 20;
child_process_table = PROCESS_TABLE + childPID * 16;

// The parent and child must share the heap. Hence if heap pages were not allocated for parent so far, allocate it now. 
if([PTBR + 4] == -1) then
	multipush(R1);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R1);
	[PTBR+4] = R0;
	[PTBR+5] = "0110";
	multipush(R1);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R1);
	[PTBR+6] = R0;
	[PTBR+7] = "0110";
endif;

// two pages for user stack and one page for user area page of child process.

multipush(R1, R5, R6, R7, R8, R9, R10);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R1, R5, R6, R7, R8, R9, R10);
[child_page_table + 4] = R0;
[child_page_table + 5] = "0110";

multipush(R1, R5, R6, R7, R8, R9, R10);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R1, R5, R6, R7, R8, R9, R10);
[child_page_table + 6] = R0;
[child_page_table + 7] = "0110";
[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;

multipush(R1, R5, R6, R7, R8, R9, R10);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R1, R5, R6, R7, R8, R9, R10);
[child_process_table + 11] = R0;
[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;

// copy parent's process table to child process table except TICK, PID, PPID, 
// UAPN, Kernel stack pointer, Input buffer, PTBR, PTLR. 
// dont copy 0, 1, 2, 8, 11, 12, 14, 15

[child_process_table + 3] = [parent_process_table + 3];
[child_process_table + 4] = [parent_process_table + 4];
[child_process_table + 5] = [parent_process_table + 5];
[child_process_table + 6] = [parent_process_table + 6];
[child_process_table + 7] = [parent_process_table + 7];
[child_process_table + 9] = [parent_process_table + 9];
[child_process_table + 10] = [parent_process_table + 10];
[child_process_table + 13] = [parent_process_table + 13];

// ppid of child process
[child_process_table + 2] = [parentPID];

// mode, tick, kernel stack pointer to 0
[child_process_table + 9] = 0;
[child_process_table + 0] = 0;
[child_process_table + 12] = 0;

// child per process resource table
alias count R11;
count = 0;
while(count < 8) do
  [[child_process_table + 11] * 512 + 512 - 16 + count * 2] = [[parent_process_table + 11] * 512 + 512 - 16 + count * 2]
  [[child_process_table + 11] * 512 + 512 - 16 + count * 2 + 1] = [[parent_process_table + 11] * 512 + 512 - 16 + count * 2 + 1]
  count = count + 1;
endwhile;

// child disk map table
count = 0;
while(count < 10) do
  [DISK_MAP_TABLE + childPID * 10 + count] = [DISK_MAP_TABLE + parentPID * 10 + count];
  count = count + 1;
endwhile;

// page table of child process. 
count = 0;
while(count < 7) do
  [child_page_table + 2*count] = [parent_page_table + 2*count];
  [child_page_table + 2*count + 1] = [parent_page_table + 2*count + 1];
  if(count >= 2) then
    [MEMORY_FREE_LIST + [parent_page_table + 2*count]] = [MEMORY_FREE_LIST + [parent_page_table + 2*count]] + 1; 
  endif;
endwhile;

// user stack of child
count = 0;
while(count < 512) do
  [[child_page_table + 8]*512 + count] = [[parent_page_table + 8]*512 + count];
  [[child_page_table + 9]*512 + count] = [[parent_page_table + 9]*512 + count];
  count = count + 1;
endwhile;

// BP value in beginning of kernel stack -> so scheduler can restore it when child run. 
[[child_process_table + 11]*512] = BP;

// return value for parent
[[PTBR + 2 * (userSP - 1)/ 512] * 512 + (userSP - 1) % 512] = childPID;

// return value for child
[[PAGE_TABLE_BASE + childPID*20 + 2 * ([child_process_table + 13] - 1)/ 512] * 512 + ([child_process_table + 13] - 1) % 512] = 0;

// child process state
[child_process_table + 4] = CREATED;

[parent_process_table + 9] = 0;
SP = userSP;
ireturn;
