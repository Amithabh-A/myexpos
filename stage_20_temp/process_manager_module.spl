//This is process manager module 

// CONSTANTS
// EXIT_PROCESS = 3
// FREE_PAGE_TABLE = 4
// FREE_USER_AREA_PAGE = 2
// RELEASE_PAGE = 2
// MEMORY_MANAGER = MOD_2 = 22528



alias functionNum R1;
alias PID R2;

if(R1 == GET_PCB_ENTRY) then
  alias pid R0;
  pid = 0;
  while(pid < 16) do
    if([PROCESS_TABLE + pid*16 + 4] == TERMINATED) then
      alias process_table R2;
      process_table = PROCESS_TABLE + pid*16;
      [process_table + 1] = pid;
      [process_table + 4] = ALLOCATED;
      [process_table + 14] = PAGE_TABLE_BASE + pid*20;
      [process_table + 15] = 10;
      return;
    endif;
    pid = pid + 1;
  endwhile;
  pid = -1;
  return;
endif;

if(R1 == EXIT_PROCESS) then
  
	multipush(R1, R2); 
	R1 = FREE_PAGE_TABLE;
	R2 = PID;
	call PROCESS_MANAGER;
	multipop(R1, R2); 

	multipush(R1, R2); 
	R1 = FREE_USER_AREA_PAGE;
	R2 = PID;
	call PROCESS_MANAGER;
	multipop(R1, R2); 

  [PROCESS_TABLE + PID * 16 + 4] = TERMINATED;
  return;
endif;

if(R1 == FREE_PAGE_TABLE) then
  alias page_table R3;
  page_table = PAGE_TABLE_BASE + PID * 20 ;

  [page_table+0] = -1;
  [page_table+1] = "0000";
  [page_table+2] = -1;
  [page_table+3] = "0000";

  // Release the page for each valid page table entry in pt by invoking the release page function.  
  alias index R4;
  index = 0;
  while(index < 10) do

    if(index == 2 || index == 3 || index == 8 || index == 10) then
      if([DISK_MAP_TABLE + PID * 10 + index] != -1) then
        multipush(R1, R2, R3, R4);
        R1 = RELEASE_BLOCK;
        R2 = [DISK_MAP_TABLE + PID * 10 + index];
        R3 = PID;
        call MEMORY_MANAGER;
        multipop(R1, R2, R3, R4);
      endif;

    endif;

    if([page_table + index*2] != -1 && index != 0) then
      [page_table + index*2] = -1;
      [page_table + index*2 + 1] = "0000";
	    // R1 : function number of release page, R2 : Page Number, R3 : return value (nothing here)
	    multipush(R0, R1, R2, R3, R4); 
      R1 = RELEASE_PAGE;
  	  R2 = [page_table + index*2];
  	  call MEMORY_MANAGER;
      multipop(R0, R1, R2, R3, R4); 
    endif;

    [DISK_MAP_TABLE + PID * 10 + index] = -1;

    index = index + 1;
  endwhile;

  return;
endif;

if(R1 == FREE_USER_AREA_PAGE) then 

  alias UAPN R3;
  UAPN = [PROCESS_TABLE + PID * 16 + 11];

	multipush(R3, R1, R2); 
  R1 = RELEASE_PAGE;
  R2 = UAPN;
	call MEMORY_MANAGER;
	multipop(R3, R1, R2);

  return;
endif;
