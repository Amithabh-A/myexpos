// code : exception handler
print "exeptn";
breakpoint;

// NOTE : EC register indicate cause of exeption. 
// NOTE : Registers set during exeption : 
//        EIP : logical IP value that caused exeption 
//        EPN : if exeption is page fault, stores logical pagenum that caused page fault. 
//        EC  : if exeption is page fault, EC indicate cause of exeption by numeric values.  
//           0: Page fault
//           1: Illegal Instructions
//           2: Illegal memory access
//           3: Arithmetic exeption
//        EMA : If exeption is illegal memory access, it stores addr of illegal memory which was tried to be accessed.  

// Doubts : 
// 1. Why do we push EIP to the stack? 
// 2. Does exceptions happen in kernel mode? If so, then why EIP stores logical IP?  
// 3. Why does we halt the program if we get an overflow in stack? - we can't allocate more stack pages -> limitation of the os architecture. 

// set MODE flag to -1 indicating exeption handler 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;
print("exhandler");

// switch to kernel stack, backup register context, push EIP onto the stack. 
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11]*512 - 1;
backup;
multipush(EIP);

// ----------------------------------------------------------------------------------------------------------------------------

// if exeption cause is not page fault or page fault occured bcz of userStack is full
if(EC != 0 || userSP == PTLR*512 - 1) then
  if(EC == 1) then
    print "illegalInstr";
  endif;
  if(EC == 2) then 
    print "IllegalMA";
  endif;
  if(EC == 3) then
    print "ArithExep";
  endif;

  R1 = EXIT_PROCESS;
  R2 = [SYSTEM_STATUS_TABLE+1];
  call PROCESS_MANAGER;

  call SCHEDULER;
// ----------------------------------------------------------------------------------------------------------------------------
else
  print "page fault";
// if page fault is due to a code page 
  if(EPN >=4 && EPN <= 7) then
    print "code pf";
  
    // get code block number to be loaded from disk map table(disk map table maps logical page to disk block for each process). 
    alias codeBlockNum R0;
    codeBlockNum = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];
  
    // invoke Get Code Page function for this block. (What?!) 
    multipush(R0);
    R1 = GET_CODE_PAGE;
    R2 = codeBlockNum;
    print "getcodeblock";
    print R2;
    call MEMORY_MANAGER;
  
    // update pt for this code page : set pageNum to memPage obt from get code page 
    [PTBR + EPN * 2] = R0;
    [PTBR + EPN * 2 + 1] = "1100";
    multipop(R0);
  
  endif;
  
  // if page fault is due to a heap page 
  if(EPN == 2 ) then
    print "heap pf";
  
    // we are allocating two memory pages for heap. i.e, There were no heap pages present. So we just need to check whether EPN == 2. 
  
    // invoke Get Free Page function
    multipush(R0);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
  
    [PTBR + 4] = R0;
    [PTBR + 5] = "1110";
  
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
  
    [PTBR + 6] = R0;
    [PTBR + 7] = "1110";
  
    multipop(R0);
  
  endif;

endif;
// ----------------------------------------------------------------------------------------------------------------------------
// reset MODE flag to 0. pop EIP from the stack and restore register context. 
// do we need to store EIP popped? actually we didnt lose our EIP. Then why do we need to push it into the stack?  
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
multipop(EIP);
restore;

// change to user stack, increment stack pointer, store the EIP value onto the location pointed by SP and return to the user mode. 
// Why are we storing EIP? because, we have to execute EIP once again. So we are storing EIP on the top of the stack. 
// Got it ! we have to reexecute the instruction which have caused exception. So we have to store EIP because what if we get an exception in
// exception handler? 

// what happens when hardware interrupt occurs? 

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13];
// os placing the address caused exceptions on the top of the application program's stack before returning to user mode.
[SP] = EIP;
ireturn;
