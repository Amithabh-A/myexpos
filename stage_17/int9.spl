//code : system call interrupt of exec system call
print "int9";

// CONSTANTS
// MAX_FILE_NUM : eXpFS permits a maximum of MAX_FILE_NUM files in inode table.  
// INODE_TABLE : points to the starting address of the Memory copy of the Inode Table present in page 59 of the memory. 
// PROCESS_MANAGER = MOD_1 = 21504 : process manager moduleMOD_1 = 21504 : process manager module. 
// MEMORY_MANAGER = MOD_2 = 22528 : module handling allocation and deallocation of memory pages. 
// MEMORY_FREE_LIST : starting address of memory free list. 
// MAX_MEM_PAGE : No of memory pages available to the process. 

// NOTE : File Types 
//          3 types of files : ROOT, DATA, EXEC
//        1. ROOT : file is a root file. 
//        2. DATA : file is a data file. 
//        3. EXEC : file is an executable file. 

// NOTE : fdisk
//          fdisk command converts raw disk into the file system format recognised by expos operating system. 
//          it initialises the following data structures : 
//            1. disk free list
//            2. inode table
//            3. root file

// NOTE : Each Inode table entry consists of 16 words

// NOTE : memory free list 
//          memory free list entry denote the number of processes using(sharing) the memory pages. 
//          Unused pages are indicated by 0 in the corresponding entry in memory free list. 

// IMPORTANT NOTE : To check whether a file is in xexe format, it should have a header and code, code section contain program instructions
// (whih we cannot check for validity), 
// heder section contains the infoemation like size of the text and data segments in the file. (we can't check the information and all. )
// can we chack whether the file have two sections? No actually. 

//set MODE flag to system call number which is 7 for exec system call.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16+9] = 7;

// Save user stack value for later use, set up the kernel stack. 
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11]*512 - 1;

// set MODE flag in process table to system call number of exec. 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

// get the argument (name of the file) from the user stack. 
// Name of the file is stored in arg1. 
// Arg1 is UserSP-4. 
alias fileName R4; 
fileName=[[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)]; 

// search the memory copy of the inode table for the file : 
// if the file is not present or file is not in XEXE format, return to the user mode with return value -1 indicating failure. 

// memory copy of the inode table is in page 59 of the memory. 
// entry 1 of the inode table is file name. 

alias fileNum R5;
fileNum = 0;
while(fileNum < MAX_FILE_NUM) do
  print [INODE_TABLE + fileNum * 16 + 1];
  if(fileName == [INODE_TABLE + fileNum * 16 + 1]) then
    break;
  endif;
  fileNum = fileNum + 1;
endwhile;

if (fileNum == MAX_FILE_NUM) then
     	//store -1 to return.
     	[[PTBR + 2 * (userSP - 1)/ 512] * 512 + (userSP - 1) % 512] = -1;
else

  // save inode index of the file into a register for future use. 
  alias inodeIndex R5;

  // call exit process. 
  
	// push all registers used till now in this interrupt in kernel stack
	multipush(R0, R4, R5); 
	
	// R1 : function number of exit process
  // R2 : PID of the current process. 
  // R3 : return value (nothing here)
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE+1];
	
	//call module 1
	call PROCESS_MANAGER;

	multipop(R0, R4, R5); 

  // 1. get user area page no from process table of the current process. This page has been deallocated by the exit process function. 
  // 2. Reclaim the same page by (a)incrementing the memory free list entry of user area  page and (b)decrementing the MEM_FREE_COUNT 
  // field in the system status table. 

  alias UAPN R4;
  UAPN = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 11];
  [MEMORY_FREE_LIST + UAPN] = [MEMORY_FREE_LIST + UAPN] + 1;
  [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;

  // Set the SP to the start of the user area page to intialize the kernel stack of the new process.
  SP = UAPN*512 - 1;

  // New process uses the PID of the terminated process. 
  // Update the STATE field to RUNNING and store inode index obtained above in the inode index field in the process table.
  [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 4] = RUNNING;
  [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 7] = inodeIndex;

  // Allocate new pages and set the page table entries for the new process.
  // 1. set the library page entries in the page table. 

  PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE] * 10;
  PTLR = 10;

  // library : 
  [PTBR+0] = 63;
  [PTBR+1] = "0100";
  [PTBR+2] = 64;
  [PTBR+3] = "0100";

  // 2. Invoke get free page function to allocate 2 stack and 2 heap pages. 
  // Also validate the corresponding entries in the page table. 

  // heap 
  // call get free page in memory manager. 
  
	// push all registers used till now in this interrupt in kernel stack
	multipush(R0, R4, R5); 
	
	// R1 : function number of get free page
  // R2 : Arguments(nil). 
  // R3 : return value (free page number)
	R1 = GET_FREE_PAGE;
	
	//call module 2
	call MEMORY_MANAGER;
  [PTBR+4] = R3;
  [PTBR+5] = "0110";
	call MEMORY_MANAGER;
  [PTBR+6] = R3;
  [PTBR+7] = "0110";

	multipop(R0, R4, R5); 

  // stack
  
	multipush(R0, R4, R5); 
	
	R1 = GET_FREE_PAGE;
	
	call MEMORY_MANAGER;
  [PTBR+16] = R3;
  [PTBR+17] = "0110";
	call MEMORY_MANAGER;
  [PTBR+18] = R3;
  [PTBR+19] = "0110";

	multipop(R0, R4, R5);

  // find out the number of blocks occupied by the file from inode table. 
  // allocate the same number of code pages by invoking the get free page 
  // function and update the page table entries. 

  //Code
  [PTBR+8] = -1;
  [PTBR+9] = "0000";
  [PTBR+10] = -1;
  [PTBR+11] = "0000";
  [PTBR+12] = -1;
  [PTBR+13] = "0000";
  [PTBR+14] = -1;
  [PTBR+15] = "0000";

  alias index R6;
  index = 0;
  while(index < 4) do
    print "here";
    if([INODE_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 8 + index] != -1) then

      [PTBR+ 8 + 2*index ] = [INODE_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 8 + index];
      [PTBR+ 9 + 2*index ] = "0110";

      index = index + 1;

    else break;
    endif;
  endwhile;

  // load the code blocks from the disk to memory using loadi statement. 
  // implemented in above while loop. 

  // store the entry point IP value on top of the user stack. 
  [[PTBR+16] * 512] = [[PTBR+8] * 512 + 1];

  //store return value 0 in the user stack indicating success
  [[PTBR + 2 * (userSP - 1)/ 512] * 512 + (userSP - 1) % 512] = 0;
endif;

//setting mode flag back
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//setting user stack
SP = userSP;

print "int9 end";
breakpoint;
ireturn;
