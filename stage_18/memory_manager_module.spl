//This is memory manager module

// CONSTANTS
// GET_FREE_PAGE = 1
// RELEASE_PAGE = 2
// GET_CODE_PAGE = 5
// MEMORY_FREE_LIST : points to starting address of memory copy of memory free list present in page 57 of the memory. 
// MAX_MEM_PAGE = 128 : Total size of memory free list, num of memory pages available to os. 

// Function number, arguments and return value
alias functionNum R1;
alias argument R2;

if(R1 == RELEASE_PAGE) then
  alias pageNum R2;
  
  // Decrement the entry of pageNum in memory free list. If that entry become 0, increment MEM_FREE_COUNT in system status table. 

  [MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1;
  if([MEMORY_FREE_LIST + pageNum] == 0) then 
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
  endif;
  
  // update the STATUS to READY for all the processes (with valid PID) which have STATUS as WAIT_MEM. 

  alias counter R0;
  counter = 0;
  while(counter < 16 ) do
    if([PROCESS_TABLE + counter * 16 + 4] == WAIT_MEM) then
      [PROCESS_TABLE + counter * 16 + 4] = READY; 
    endif;
    counter = counter + 1;
  endwhile;

  return;
endif;

if(R1 == GET_FREE_PAGE) then

  // increment WAIT_MEM_COUNT in system status table. 
  [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;

  // while memory is full(MEM_FREE_COUNT = 0), do the following : 

  while([SYSTEM_STATUS_TABLE+2] == 0) do
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 4] = WAIT_MEM;
    call SCHEDULER;
  endwhile;

  // decrement WAIT_MEM_COUNT and MEM_FREE_COUNT in system status table. 
  [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] - 1;
  [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;

  // find a free page using memory free list and set the corresponding entry as 1. 
  alias counter R0;
  counter = 0;
  while(counter <= MAX_MEM_PAGE) do
    if([MEMORY_FREE_LIST + counter] == 0) then
      [MEMORY_FREE_LIST + counter] = 1;
      break;
    endif;
    counter = counter + 1;
  endwhile;

  R3 = R0;
  return;
endif;
